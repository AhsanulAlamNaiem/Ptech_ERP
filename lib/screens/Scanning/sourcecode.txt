                if (designation == 'Supervisor' &&
                    machineStatus == 'active') ...[
                  //stage active to broken  && machineStatus == 'active'
                  Text("Your Role: $designation"),
                  const Text("Is the machine broken?"),
                  SizedBox(height: 16),





                  problemCategories.isEmpty
                      ? const CircularProgressIndicator()
                      : DropdownButton<String>(
                    value: selectedCategory,
                    hint: const Text("Select Problem Category"),
                    isExpanded: true,
                    items: problemCategories.map((category) {
                      return DropdownMenuItem<String>(
                        value: category['id'].toString(),
                        child: Text(category['name']),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        selectedCategory = newValue;
                        selectedCategoryIndex = int.parse(newValue!);
                      });
                      onCategoryChange(selectedCategoryIndex);
                    },
                  ),
                  const SizedBox(height: 16.0),

                  DropdownButton<String>(
                    value: selectedSubCategory,
                    hint: const Text("Select Subcategory"),
                    isExpanded: true,
                    items: subCategories.map((subCategory) {
                      return DropdownMenuItem<String>(
                        value: subCategory['id'].toString(),
                        child: Text(subCategory['name']),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        selectedSubCategory = newValue;
                        selectedSubCategoryIndex = int.parse(newValue!);
                        strSelectedSubCategory = subCategories.firstWhere((item)=>item['id']==selectedSubCategoryIndex)['name'];
                        print(strSelectedSubCategory);
                      });
                    },
                  ),
                  const Spacer(),

                  SizedBox(height: 16),
                  isPatching
                      ? CircularProgressIndicator()
                      : successMessage != null
                      ? Text("$successMessage")
                      : ElevatedButton(
                    onPressed: () {
                      final currentTIme = DateTime.now()
                          .toUtc()
                          .toString()
                          .split('.')
                          .first;
                      Map body = {
                        "status": "broken",
                        "last_breakdown_start":
                        currentTIme.split(" ")[0] +
                            "T" +
                            currentTIme.split(" ")[1] +
                            "Z",
                        "last_problem": strSelectedSubCategory
                      };

                      print(body);
                      updateMachineStatus(
                          machineId: machine['id'].toString(),
                          body: body);
                    },
                    child: const Text("Set to Broken"),
                  ),
                ] else if (designation == 'Supervisor' &&
                    machineStatus == 'maintenance') ...[
                  //&& machineStatus == 'maintenance'
                  Text("Your Role: $designation"),
                  const Text("Is the machine active now?"),
                  const SizedBox(height: 16.0),

                  problemCategories.isEmpty
                      ? const CircularProgressIndicator()
                      : DropdownButton<String>(
                    value: selectedCategory,
                    hint: const Text("Select Problem Category"),
                    isExpanded: true,
                    items: problemCategories.map((category) {
                      return DropdownMenuItem<String>(
                        value: category['id'].toString(),
                        child: Text(category['name']),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        selectedCategory = newValue;
                        selectedCategoryIndex = int.parse(newValue!);
                      });
                      onCategoryChange(selectedCategoryIndex);
                    },
                  ),
                  const SizedBox(height: 16.0),

                  DropdownButton<String>(
                    value: selectedSubCategory,
                    hint: const Text("Select Subcategory"),
                    isExpanded: true,
                    items: subCategories.map((subCategory) {
                      return DropdownMenuItem<String>(
                        value: subCategory['id'].toString(),
                        child: Text(subCategory['name']),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        print(newValue);
                        selectedSubCategory = newValue;
                        selectedSubCategoryIndex = int.parse(newValue!);
                        print(selectedSubCategoryIndex);
                      });
                    },
                  ),
                  const Spacer(),

                  isPatching
                      ? CircularProgressIndicator()
                      : successMessage != null
                      ? Text("$successMessage")
                      : ElevatedButton(
                    onPressed: () {
                      if (selectedCategoryIndex == -1) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                                "Category should be selected should not be 0!"),
                            duration: Duration(seconds: 2),
                            behavior: SnackBarBehavior.floating,
                          ),
                        );
                        return;
                      }
                      DateTime startTime = DateTime.parse(
                          "${machine['last_breakdown_start']}");
                      DateTime endTime = DateTime.parse(DateTime.now()
                          .toUtc()
                          .toString()
                          .split('.')
                          .first +
                          'Z');
                      String formattedDuration = endTime
                          .difference(startTime)
                          .toString()
                          .split('.')
                          .first;

                      Map body = {
                        "status": "active",
                      };

                      final breakdownBody = {
                        "breakdown_start": "$startTime",
                        "repairing_start":
                        "${machine['last_repairing_start'] ?? "2025-01-09T11:50:00Z"}",
                        "lost_time": formattedDuration,
                        "comments": "",
                        "machine": "${machine['id']}",
                        "mechanic": "",
                        "operator": "",
                        "problem_category": "$selectedSubCategoryIndex",
                        "location": "1",
                        "line": "${machine['line']}",
                      };
                      print(breakdownBody);
                      updateMachineStatus(
                          machineId: machine['id'].toString(),
                          body: body,
                          willUpdateBreakdown: true,
                          breakdownBody: breakdownBody);
                    },
                    child: const Text("Set to Active"),
                  ),
                ] else if (designation == 'Mechanic' &&
                    machineStatus == 'broken') ...[
                  //stage broken to maintenance
                  Text("Your Role: $designation"),
                  const Text(
                      "Do you want to set the machine status to Maintenance?"),
                  const SizedBox(height: 16.0),
                  isPatching
                      ? CircularProgressIndicator()
                      : successMessage != null
                      ? Text("$successMessage")
                      : ElevatedButton(
                    onPressed: () {
                      final currentTIme = DateTime.now()
                          .toUtc()
                          .toString()
                          .split('.')
                          .first;
                      Map body = {
                        "status": "maintenance",
                        "last_repairing_start":
                        currentTIme.split(" ")[0] +
                            "T" +
                            currentTIme.split(" ")[1] +
                            "Z"
                      };
                      updateMachineStatus(
                          machineId: machine['id'].toString(),
                          body: body);
                    },
                    child: const Text("Set to Maintenance"),
                  ),
                ] else if (designation == 'Admin Officer') ...[
                  Text("Your Role: $designation"),
                  const Text("Change machine status to:"),
                  const SizedBox(height: 16.0),


                  DropdownButton<String>(
                    value: machineStatus,
                    items: statuses.map((status) {
                      return DropdownMenuItem(
                        value: status,
                        child: Text(status),
                      );
                    }).toList(),
                    onChanged: (newStatus) {
                      if (newStatus != null) {
                        updateMachineStatus(machineId: machine['id'], body: {});
                      }
                    },
                  ),
                ]